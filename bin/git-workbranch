#!/usr/bin/env bash

# --
# # Git Workbranch
#
# `git-workbranch` is a CLI tool that makes
function git-pick-branch {
	local BRANCH="$1"
	local REPO_BRANCHES="$(git branch -a | grep -v 'HEAD' | sed 's|remotes/origin/||g;s|[+* ]||g' | sort | uniq)"
	local MATCHING_BRANCH
	if [ -z "$BRANCH" ]; then
		MATCHING_BRANCH="$REPO_BRANCHES"
	else
		MATCHING_BRANCH="$(echo "$REPO_BRANCHES" | grep "$BRANCH")"
	fi
	if [ -z "$MATCHING_BRANCH" ]; then
		echo "ERR - Could not find branch: '$BRANCH'"
		exit 1
	elif [ "$(echo "$MATCHING_BRANCH" | wc -l)" != "1" ]; then
		MATCHING_BRANCH="$(echo "$MATCHING_BRANCH" | fzf)"
	fi
	echo -n "$MATCHING_BRANCH"
}

# --
# Checks out a worktree branch
function git-workbranch-checkout {
	local BRANCH="$1"
	local REPO_NAME="$(basename $(git rev-parse --show-toplevel) | sed 's|--.*||g')"
	local MATCHING_BRANCH
	if ! MATCHING_BRANCH="$(git-pick-branch "$BRANCH")"; then
		echo $MATCHING_BRANCH
		exit 1
	fi
	local BRANCH_PATH="$(git rev-parse --show-toplevel)/../$REPO_NAME--$MATCHING_BRANCH"
	echo "--- Selected branch: $MATCHING_BRANCH at '$(realpath --relative-to="$PWD" $BRANCH_PATH)'"
	if [ -e "$BRANCH_PATH" ]; then
		echo "--- Worktree already exists: $(realpath --relative-to="$PWD" $BRANCH_PATH)"
	else
		git worktree add "$BRANCH_PATH" "$MATCHING_BRANCH"
		git -C "$BRANCH_PATH" branch --set-upstream-to=origin/$MATCHING_BRANCH $MATCHING_BRANCH
		echo "--- Worktree created at: $(realpath --relative-to="$PWD" $BRANCH_PATH)"
	fi
}

function git-workbranch-list {
	local BRANCH="$1"
	local REPO_BRANCHES="$(git branch -a | grep -v 'HEAD' | sed 's|remotes/origin/||g;s|[+* ]||g' | sort | uniq)"
	local REPO_NAME="$(basename $(git rev-parse --show-toplevel) | sed 's|--.*||g')"
	local branch
	local branch_path
	local base_path="$(git rev-parse --show-toplevel)/.."
	local checked_branches
	local unchecked_branches
	for branch in $REPO_BRANCHES; do
		branch_path="$(realpath --relative-to="$PWD" "$base_path/$REPO_NAME--$branch")"
		if [ -e "$branch_path" ]; then
			checked_branches+="$branchâ†’$branch_path "
		else
			unchecked_branches+="$branch "
		fi
	done
	if [ -n "$checked_branches" ]; then
		echo "Checked out branches:"
		for branch in $checked_branches; do
			echo " - $branch"
		done
	fi
	if [ -n "$unchecked_branches" ]; then
		echo "Unchecked out branches:"
		for branch in $unchecked_branches; do
			echo " - $branch"
		done
	fi
}

function git-workbranch-remove {
	local BRANCH="$1"
	local MATCHING_BRANCH
	if [ -z "$1" ]; then
		BRANCH="$(git branch --show-current)"
	fi
	if ! MATCHING_BRANCH="$(git-pick-branch "$BRANCH")"; then
		echo $MATCHING_BRANCH
		exit 1
	fi
	echo "git worktree remove $MATCHING_BRANCH"
}

case "$1" in
checkout)
	shift
	git-workbranch-checkout "$@"
	;;
remove)
	shift
	git-workbranch-remove "$@"
	;;
list)
	shift
	git-workbranch-list "$@"
	;;
*)
	git-workbranch-checkout "$@"
	;;
esac

# EOF
