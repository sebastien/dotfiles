#!/usr/bin/env bash

# --
# # Git Workbranch
#
# `git-workbranch` is a CLI tool that makes it easier to work with branches
# and worktrees.
#
# The typical workflow is like so:
#
# ```
# $ cd my-repo
# $ git-workbranch ls
# Unchecked out branches:
#  - main
#  - branch-A
#  - branch-B
# $ git-workbranch co branch-A
# --- Selected branch: branch-a at '../my-repo--branch-a'
# Preparing worktree (new branch 'my-repo-branch-a')
# branch 'my-repo-branch-a' set up to track 'origin/my-repo-branch-a'.
# HEAD is now at ccd43e6 commit description
# branch 'my-repo-branch-a' set up to track 'origin/branch-a'.
# --- Worktree created at: ../my-repo--branch-a
# ``````
function git-pick-branch {
	local BRANCH="$1"
	local REPO_BRANCHES="$(git branch -a | grep -v 'HEAD' | sed 's|remotes/origin/||g;s|[+* ]||g' | sort | uniq)"
	local MATCHING_BRANCH
	if [ -z "$BRANCH" ]; then
		MATCHING_BRANCH="$REPO_BRANCHES"
	else
		MATCHING_BRANCH="$(echo "$REPO_BRANCHES" | grep "$BRANCH")"
	fi
	if [ -z "$MATCHING_BRANCH" ]; then
		echo "ERR - Could not find branch: '$BRANCH'"
		exit 1
	elif [ "$(echo "$MATCHING_BRANCH" | wc -l)" != "1" ]; then
		MATCHING_BRANCH="$(echo "$MATCHING_BRANCH" | fzf)"
	fi
	echo -n "$MATCHING_BRANCH"
}

function git-workbranch-create {
	local BRANCH="$1"
	local REPO_NAME="$(basename $(git rev-parse --show-toplevel) | sed 's|--.*||g')"
	local BRANCH_EXISTS="$(git branch -a | grep -v 'HEAD' | sed 's|remotes/origin/||g;s|[+* ]||g' | sort | uniq | grep "$BRANCH")"
	local BRANCH_PATH
	if [ -n "$BRANCH_EXISTS" ]; then
		echo "ERR - Branch name is too ambiguous, matching branches are:"
		echo "$BRANCH_EXISTS"
	else
		BRANCH_PATH="$(git rev-parse --show-toplevel)/../$REPO_NAME--$BRANCH"
		if [ -e "$BRANCH_PATH" ]; then
			echo "--- Worktree already exists: $(realpath --relative-to="$PWD" $BRANCH_PATH)"
		else
			echo "--- Creating new branch $BRANCH: $(realpath --relative-to="$PWD" $BRANCH_PATH)"
			git worktree add -b "$BRANCH" "$BRANCH_PATH"
		fi
	fi
}

# --
# Checks out a worktree branch
function git-workbranch-checkout {
	local BRANCH="$1"
	local REPO_NAME="$(basename $(git rev-parse --show-toplevel) | sed 's|--.*||g')"
	local MATCHING_BRANCH
	if ! MATCHING_BRANCH="$(git-pick-branch "$BRANCH")"; then
		echo $MATCHING_BRANCH
		exit 1
	fi
	local BRANCH_PATH="$(git rev-parse --show-toplevel)/../$REPO_NAME--$MATCHING_BRANCH"
	echo "--- Selected branch: $MATCHING_BRANCH at '$(realpath --relative-to="$PWD" $BRANCH_PATH)'"
	if [ -e "$BRANCH_PATH" ]; then
		echo "--- Worktree already exists: $(realpath --relative-to="$PWD" $BRANCH_PATH)"
	else
		git worktree add "$BRANCH_PATH" "$MATCHING_BRANCH"
		git -C "$BRANCH_PATH" branch --set-upstream-to=origin/$MATCHING_BRANCH $MATCHING_BRANCH
		echo "--- Worktree created at: $(realpath --relative-to="$PWD" $BRANCH_PATH)"
	fi
}

function git-workbranch-list {
	local BRANCH="$1"
	local REPO_BRANCHES="$(git branch -a | grep -v 'HEAD' | sed 's|remotes/origin/||g;s|[+* ]||g' | sort | uniq)"
	local REPO_NAME="$(basename $(git rev-parse --show-toplevel) | sed 's|--.*||g')"
	local branch
	local branch_path
	local base_path="$(git rev-parse --show-toplevel)/.."
	local checked_branches
	local unchecked_branches
	for branch in $REPO_BRANCHES; do
		branch_path="$(realpath --relative-to="$PWD" "$base_path/$REPO_NAME--$branch")"
		if [ -e "$branch_path" ]; then
			checked_branches+="$branchâ†’$branch_path "
		else
			unchecked_branches+="$branch "
		fi
	done
	if [ -n "$checked_branches" ]; then
		echo "Checked out branches:"
		for branch in $checked_branches; do
			echo " - $branch"
		done
	fi
	if [ -n "$unchecked_branches" ]; then
		echo "Unchecked out branches:"
		for branch in $unchecked_branches; do
			echo " - $branch"
		done
	fi
}

function git-workbranch-remove {
	local BRANCH="$1"
	local MATCHING_BRANCH
	if [ -z "$1" ]; then
		BRANCH="$(git branch --show-current)"
	fi
	if ! MATCHING_BRANCH="$(git-pick-branch "$BRANCH")"; then
		echo "$MATCHING_BRANCH"
		exit 1
	fi
	git worktree remove "$MATCHING_BRANCH"
}

#
# TODO: Should merge --squash back to main
# function git-workbranch-merge {
# }
#

function git-workbranch-merge {
	local changes="$(git-workbranch-util git-has-changes)"
	if [ -n "$changes" ]; then
		echo "ERR - Uncommitted local changes, can't close the branch: $changes" >/dev/stderr
		exit 1
	fi
	# TODO: Is that branch already merged with main?
	# TODO: Did we push that branch? This should be a yes
	# TODO: Now we go into the main branch and merge this one

}

# -- doc
# Closes the current branch
function git-workbranch-close {
	git-workbranch-merge
	# TODO: If things succeed, then we can safely remove that branch
}

function git-workbranch-util {
	case $1 in
	git-has-changes)
		if git status --porcelain | grep 'M '; then
			echo -n "1"
		fi
		;;
	*)
		echo "ERR - Unknown utility function: $1" >/dev/stderr
		exit 1
		;;
	esac
}
case "$1" in
new | create)
	shift
	git-workbranch-create "$@"
	;;
co | checkout)
	shift
	git-workbranch-checkout "$@"
	;;
cl | close)
	shift
	git-workbranch-close "$@"
	;;
rm | remove)
	shift
	git-workbranch-remove "$@"
	;;
ls | list)
	shift
	git-workbranch-list "$@"
	;;
*)
	echo "git-workbranch available commands:"
	echo " - create   BRANCH_NAME:   Creates a new branch worktree"
	echo " - checkout BRANCH_NAME:   Checks out a new branch worktree"
	echo " - close    [BRANCH_NAME]: Closed the branch branch worktress and removes it"
	echo " - remove   [BRANCH_NAME]: Remove the current or given/current branch from the worktree"
	echo " - list:                   List the checked out worktree branches"
	;;
esac

# EOF
